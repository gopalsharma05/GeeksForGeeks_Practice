/*
  Given three sorted arrays A, B and C of size N, M and P respectively. The task is to merge them into a single array which must be sorted in increasing order.

Input:
First line of input contains number of testcases T. For each testcase, first line of input contains size of three arrays N, M and P. Next three lines contains N, M and P elements for arrays.

Output:
Output the merged array.

Constraints:
1 <= T <= 100
1 <= N, M, P <= 106
1 <= A[i], B[i], C[i] <= 106

Example:
Input:
1
4 5 6
1 2 3 4
1 2 3 4 5
1 2 3 4 5 6

Output:
1 1 1 2 2 2 3 3 3 4 4 4 5 5 6

Explanation:
Testcase 1: Merging these three sorted arrays, we have elements as 1 1 1 2 2 2 3 3 3 4 4 4 5 5 6.
  
  */
  
  
 // 1.here i solve this using minheap
 
 
#include<bits/stdc++.h>
using namespace std;
#define lli long long int
#define pr pair<lli,lli>

int main() {
	//code
	
	lli t;
	cin>>t;
	while(t--)
	{
	    lli a,b,c;   // size of all three array
	    cin>>a>>b>>c;
	    
	    lli arr1[a],arr2[b],arr3[c];
	    
	    // taking input for three sorted arrays
	    
	    for(lli i =0;i<a;i++)
	    {
	        cin>>arr1[i];
	    }
	    for(lli i =0;i<b;i++)
	    {
	        cin>>arr2[i];
	    }
	    for(lli i =0;i<c;i++)
	    {
	        cin>>arr3[i];
	    }
	    
	    priority_queue<pr,vector<pr>, greater<pr> > pq;
	    
	    lli i=0,j=0,k=0;
	    pq.push({arr1[i],-1});    // putting 1st elements of all the array to mean heap with there assumed name,i.e(-1 for arr[1], -2 for
                                // arr2, -3 for arr3) . and increase the value of i,j, k so that next element can be pushed to minheap
	     pq.push({arr2[j],-2});
	      pq.push({arr3[k],-3});
	      i++;j++;k++;
	      
	      while(!pq.empty())
	      {
	          pr p=pq.top();      // we are taking out top PAIR(has min_value and the array_name from which it come, so that we can push 
                                  // element from that array
	          cout<<p.first<<" ";
	          pq.pop();
	          if(p.second==-1)        // if pop pair has element from 1st array then.....push its next element and increament i
	          {
	              
	              
	              if(i<a)             //     checking that ,,,we have traversed the whole array or not..if not..it means we cant push 
                                          // element of the same array in minheap.....in the same way we can do for rest of 2 array
	              {
	                  pq.push({arr1[i],-1});
	                  i++;
	              }
	          }
	          else if(p.second==-2)
	          {
	               
	               
	              if(j<b)
	              {
	                  pq.push({arr2[j],-2});
	                  j++;
	              }
	          }
	          else if(p.second==-3)
	          {
	              
	               
	              if(k<c)
	              {
	                  pq.push({arr3[k],-3});
	                  k++;
	              }
	          }
	      }
	      
	      cout<<endl;
	    
	    
	}
	
	return 0;
}
